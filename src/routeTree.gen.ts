/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as ProtectedImport } from './routes/_protected'

// Create Virtual Routes

const PublicAuthLazyImport = createFileRoute('/_public/auth')()
const ProtectedTradeLazyImport = createFileRoute('/_protected/trade')()
const ProtectedStatisticsLazyImport = createFileRoute(
  '/_protected/statistics',
)()
const ProtectedOrdersLazyImport = createFileRoute('/_protected/orders')()
const ProtectedMfaLazyImport = createFileRoute('/_protected/mfa')()
const ProtectedHomeLazyImport = createFileRoute('/_protected/home')()
const ProtectedDashboardLazyImport = createFileRoute('/_protected/dashboard')()
const ProtectedAccountLazyImport = createFileRoute('/_protected/account')()

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const PublicAuthLazyRoute = PublicAuthLazyImport.update({
  path: '/auth',
  getParentRoute: () => PublicRoute,
} as any).lazy(() => import('./routes/_public/auth.lazy').then((d) => d.Route))

const ProtectedTradeLazyRoute = ProtectedTradeLazyImport.update({
  path: '/trade',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/trade.lazy').then((d) => d.Route),
)

const ProtectedStatisticsLazyRoute = ProtectedStatisticsLazyImport.update({
  path: '/statistics',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/statistics.lazy').then((d) => d.Route),
)

const ProtectedOrdersLazyRoute = ProtectedOrdersLazyImport.update({
  path: '/orders',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/orders.lazy').then((d) => d.Route),
)

const ProtectedMfaLazyRoute = ProtectedMfaLazyImport.update({
  path: '/mfa',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/mfa.lazy').then((d) => d.Route),
)

const ProtectedHomeLazyRoute = ProtectedHomeLazyImport.update({
  path: '/home',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/home.lazy').then((d) => d.Route),
)

const ProtectedDashboardLazyRoute = ProtectedDashboardLazyImport.update({
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/dashboard.lazy').then((d) => d.Route),
)

const ProtectedAccountLazyRoute = ProtectedAccountLazyImport.update({
  path: '/account',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/account.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_protected/account': {
      id: '/_protected/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof ProtectedAccountLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/home': {
      id: '/_protected/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtectedHomeLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/mfa': {
      id: '/_protected/mfa'
      path: '/mfa'
      fullPath: '/mfa'
      preLoaderRoute: typeof ProtectedMfaLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/orders': {
      id: '/_protected/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof ProtectedOrdersLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/statistics': {
      id: '/_protected/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof ProtectedStatisticsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/trade': {
      id: '/_protected/trade'
      path: '/trade'
      fullPath: '/trade'
      preLoaderRoute: typeof ProtectedTradeLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_public/auth': {
      id: '/_public/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof PublicAuthLazyImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedAccountLazyRoute: typeof ProtectedAccountLazyRoute
  ProtectedDashboardLazyRoute: typeof ProtectedDashboardLazyRoute
  ProtectedHomeLazyRoute: typeof ProtectedHomeLazyRoute
  ProtectedMfaLazyRoute: typeof ProtectedMfaLazyRoute
  ProtectedOrdersLazyRoute: typeof ProtectedOrdersLazyRoute
  ProtectedStatisticsLazyRoute: typeof ProtectedStatisticsLazyRoute
  ProtectedTradeLazyRoute: typeof ProtectedTradeLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAccountLazyRoute: ProtectedAccountLazyRoute,
  ProtectedDashboardLazyRoute: ProtectedDashboardLazyRoute,
  ProtectedHomeLazyRoute: ProtectedHomeLazyRoute,
  ProtectedMfaLazyRoute: ProtectedMfaLazyRoute,
  ProtectedOrdersLazyRoute: ProtectedOrdersLazyRoute,
  ProtectedStatisticsLazyRoute: ProtectedStatisticsLazyRoute,
  ProtectedTradeLazyRoute: ProtectedTradeLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

interface PublicRouteChildren {
  PublicAuthLazyRoute: typeof PublicAuthLazyRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAuthLazyRoute: PublicAuthLazyRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/account': typeof ProtectedAccountLazyRoute
  '/dashboard': typeof ProtectedDashboardLazyRoute
  '/home': typeof ProtectedHomeLazyRoute
  '/mfa': typeof ProtectedMfaLazyRoute
  '/orders': typeof ProtectedOrdersLazyRoute
  '/statistics': typeof ProtectedStatisticsLazyRoute
  '/trade': typeof ProtectedTradeLazyRoute
  '/auth': typeof PublicAuthLazyRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRouteWithChildren
  '/account': typeof ProtectedAccountLazyRoute
  '/dashboard': typeof ProtectedDashboardLazyRoute
  '/home': typeof ProtectedHomeLazyRoute
  '/mfa': typeof ProtectedMfaLazyRoute
  '/orders': typeof ProtectedOrdersLazyRoute
  '/statistics': typeof ProtectedStatisticsLazyRoute
  '/trade': typeof ProtectedTradeLazyRoute
  '/auth': typeof PublicAuthLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/account': typeof ProtectedAccountLazyRoute
  '/_protected/dashboard': typeof ProtectedDashboardLazyRoute
  '/_protected/home': typeof ProtectedHomeLazyRoute
  '/_protected/mfa': typeof ProtectedMfaLazyRoute
  '/_protected/orders': typeof ProtectedOrdersLazyRoute
  '/_protected/statistics': typeof ProtectedStatisticsLazyRoute
  '/_protected/trade': typeof ProtectedTradeLazyRoute
  '/_public/auth': typeof PublicAuthLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/account'
    | '/dashboard'
    | '/home'
    | '/mfa'
    | '/orders'
    | '/statistics'
    | '/trade'
    | '/auth'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/account'
    | '/dashboard'
    | '/home'
    | '/mfa'
    | '/orders'
    | '/statistics'
    | '/trade'
    | '/auth'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_protected/account'
    | '/_protected/dashboard'
    | '/_protected/home'
    | '/_protected/mfa'
    | '/_protected/orders'
    | '/_protected/statistics'
    | '/_protected/trade'
    | '/_public/auth'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/_public"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/account",
        "/_protected/dashboard",
        "/_protected/home",
        "/_protected/mfa",
        "/_protected/orders",
        "/_protected/statistics",
        "/_protected/trade"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/auth"
      ]
    },
    "/_protected/account": {
      "filePath": "_protected/account.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/home": {
      "filePath": "_protected/home.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/mfa": {
      "filePath": "_protected/mfa.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/orders": {
      "filePath": "_protected/orders.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/statistics": {
      "filePath": "_protected/statistics.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/trade": {
      "filePath": "_protected/trade.lazy.tsx",
      "parent": "/_protected"
    },
    "/_public/auth": {
      "filePath": "_public/auth.lazy.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
